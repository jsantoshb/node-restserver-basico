POO
  - Patrones de diseXo 
      Que son ?  - son una forma de lidiar con ciertos problemas que ya le ocurrieron a alguien, patron para atacar el problema 

      Conoces alguno ? strategy para cambiar dependencias, decorator para comportamientos, 
      
  - SOLID
     has escuchado de SOLID ?  Si lo a escuchado, describio cada letra, principios de diseño
       S - cada clase debe de hacer una sola cosa
       O - extenderse 
       L - puedas intercambiar un objeto o subclase por un objeto de la clase base, 
       I - interface agregation como el S pero con interfaces chicas y que las clases que la implementen sea porque lo requiere
       D - depedenci inversion, si tienes el core que usa un repositorio, no debe haber dependencia, solo depender de interfaces

  - Describir el patron MVC - 

  - PROGRAMACION EN CAPAS - Si lo conoce

  - Describir la diferencia entre Interface y clase abstracta, cuando usar una u otra : La interfas para polimorfismo, (patron de stragety, mis strategies implementan mi interfaz), para el patron repository.

      Clase Abstracta ? una clase que no puede ser instanciada, tiene metodos y propiedades definidas concretos o metodos no implementados, los cuales seran implementados por las clases hijas

      Interfaces, para que las has usado ?  herramienta muy util, utilizada para el polimorfismo, es un contrato, la clase que la implemente debe de meter el codigo 

   Pilares:
    - Encapsulamiento, herencia y polimorfismo: 

       HERENCIA: Reusar codigo, de una clase base heredas (generas), de la misma familia

       ABSTRACCION: Capacidad dependiendo del contexto son los datos que te sirvan, 

       ENCAPSULACION: Esconder los detalles, 

       POLIMORFISMO:  Capacidad de inyectar diferentes dependencia en tiempo de ejecucion, 

LINQ - si conoce
      - Lambda - 
      - expresion - 

Entity framework: 

   Que es ? es un ORM, lo que hace es hacer la vida mas facil al momentro de trabajar con los datos, mapea las tablas a objetos a entidades o clases en tu codigo

   Tipos de modelos: database first, code first (usar migraciones para cambio), model first,  

   Experiencia en EF 
 
   DBCONTEXT ? Si contesto bien
   
   DBSETS - trabajar con colecciones, si conoce

Preguntas:
  - Has trabajado con winforms ?
    WINDOWSFORMS - 
    
    ASP.NET WEBFORMS - Statelees
        POSTBACK ? viaje al servidor, por ejemplo un boton hace un post,  

        MANEJO DE ESTADO ? ViewState guardas, de lado del cliente cookies, Cache, 

SQL
   - Explicar que es un INNER JOIN : Interseccion de 2 tablas, los reg donde coinciden ambas tablas 
            y que es un OUTER JOIN : Union menos la interseccion, (hablando de conjuntos), 
    
   - Explain plan 
          
   - Que es una transaccion ? se considera atomico, o todo se hace o nada se hace, no guardar solo una parte, SI CONTESTO. 
     
   - ACID 
       
WCF - LO USO UN POCO. 
  Que es el ABC ?
  

REST 
  Que es un REST Full Service ? Son servicios en los cuales usas convenciones, GET POST no manejas un estado, un aproach mas a WCF, nomenclatura protocolo HTTP

  Verbos del REST ? GET (CONSULTA), PUT (PARA INSERTS), POST, DELETE  - 

  Que protocolo usa para la comunicacion: HTTP -

   - Codigos de retorno 
       CODIGOS HTTP, 200s exitoso, 300s, 400s bad request, not found, 500s errores del servidor

  - EN QUE SE BASAN ? (EN RECURSOS, URLS) 

WEB-APIS:     
 Como configuras para que el un metodo del controller sea un endpoint ? estar en una clase de basecontroller, tener el atributo del routing, los metodos los etiquetas con http, routing y parametros- MUY BIEN

Unit test - uso machin spec, basados en delegados, Xunit  
   Que es el triple A: SI CONOCE, CONTESTO
      A - Arrange - SETEAS TU ESCENARIO
      A - Act - EJECUTAS TU PRUEBA
      A - Assert - VALIDAS QUE TU PRUEBA PASE O FALLE

Code review - SI, INFORMALES

pull request - 

Metodologia agil ? 

GIT - muy poco, a utilizado mas TFS
  Que es un repositorio ? branches, el master, y de alli puedes hacer branches

  Que hace el comando pull ? 

  Como crear un branch ?  

  Que hace el comando merge ? 

  Que hace el push ? si conoce, hace fetch previo para resolver conflictos de tu lado

  
JavaScript - 

 - Cuando usar === PARA COMPARAR QUE EL VALOR Y EL TIPO ES IGUAL - validar hasta el tipo - SI CONOCE

 - En que lugar se ejecuta generalmente ? Servidor ? cliente ? EN EL CLIENTE EN BROWER

- ¿Qué son los closures?
   Una función que es libre de variables, esto quiere decir que las variables de la función padre funcionan, pero el closure no tiene variables propias. SI LOS A USADO

- Tipos de funciones SI, FUNCION NOMBRE DE LA FUNCION, SI SABE

    Nombradas: este tipo de funciones se les asigna un nombre en el momento de la definición. Por ejemplo:
    
    	function display() 
	{ 
	   document.writeln("Named Function"); 
	} 
	display(); 

    Anónimas: este tipo de funciones no contiene ningún nombre. Se declaran dinámicamente en tiempo de ejecución.

	var display=function() 
	{ 
	  document.writeln("Anonymous Function"); 
	} 
	display();      

  
- ¿Cómo usar un archivo JavaScript externo?
   Supongamos que tenemos un archivo javascript que se llama message.js, debemos colocar la siguiente etiqueta de script dentro de la etiqueta head.

          <script type="text/javascript" src="message.js"></script> 

- ¿Javascript es sensible a mayúsculas / minúsculas? SI ES - NO SE ACUERDA

	Sí, JavaScript es un lenguaje sensible a mayúsculas y minúsculas. Por ejemplo:

Que patrones de disenio has implementado en Javascript?

Cual es la diferencia entre MVVM y MVC? 

Que es el event loop de NodeJs?

Debido a que JS no es un lenguaje compilado, como puedes previenes errores? Try catch, si sabe.

Que experiencia tienes con estos frameworks: AngularJs, ReactJs, Backbone, Knockout - ANGULAR

Como puedes implementar OOP en Javascript? Type Script, programacion basada en prototipos: SI CONOCE, ECM6, 


- Cuál es el uso de la función isNaN? - CHECAR SI NO ES DE TIPO NUMERO
La función isNaN es de alto nivel y no está asociada a ningún objeto. intenta convertir el parámetro pasado a un número. Si el parámetro no se puede convertir, devuelve true; 
en caso contrario, devuelve false. Esta función es útil ya que el valor NaN no puede se probado correctamente con operadores de igualdad. x == NaN y x === NaN son siempre false, 
sin importar lo que sea x, incluso si x es NaN. Por ejemplo, tanto 1 == NaN como NaN == NaN devuelven false.